package edu.uiowa.cs.similarity;

import java.io.*;
import java.util.List;

public class Main {

    private static void printMenu() {
        System.out.println("Supported commands:");
        System.out.println("help - Print the supported commands");
        System.out.println("index <FILE> - parameters: FILE - Read in and index the file given by the parameter FILE");
        System.out.println("sentences - Prints sentences generated by the index command and prints the number of sentences stored");
        System.out.println("vectors - Prints every semantic descriptor vector for each unique word");
        System.out.println("topj <QUERY WORD> <INTEGER> - parameters: QUERY WORD, INTEGER - Prints the J (INTEGER) most similar words to Q (QUERY WORD)");
        System.out.println("measure <CALCULATION TYPE> - parematers: CALCULATION TYPE - Changes the similarity calculation for topj depending on the input word");
        System.out.println("quit - Quit this program");
    }
    
    public static void main(String[] args) throws IOException {
        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        Indexer index = null;
        String[] measurement = new String[2];
        Similarity similarity;

        while (true) {
            System.out.print("> ");
            String command = input.readLine();
            if (command.equals("help") || command.equals("h")) {
                printMenu();
            } else if (command.contains("index")) {
                if (command.length() < 7) {
                    System.err.println("Must pass argument");
                } else {
                    try {
                        String filename = command.substring(6, command.length());

                        /* Either create new Indexer or update the current Indexer to
                           reflect new files
                        */
                        if (index == null) {
                            index = new Indexer(filename);
                        } else {
                            index = new Indexer(filename, index);
                        }
                        System.out.println("Indexing " + filename);
                    } catch (FileNotFoundException e) {
                        System.err.println("File not found");
                    }
                }
            } else if (command.equals("sentences")) {
                if (index != null) {
                    System.out.println(index.list);
                    System.out.println("Num sentences");
                    System.out.println(index.list.size());
                } else {
                    System.out.println("[]");
                    System.out.println("Num sentences");
                    System.out.println("0");
                }
            } else if (command.equals("vectors")) {
                if (index != null) {
                    System.out.println(index.vector);
                } else {
                    System.out.println("{}");
                }
            } else if (command.contains("topj")) {
                if (command.length() < 8) {
                    System.err.println("Must pass a word and an integer");
                } else if (index == null) {
                    System.err.println("Must index a file");
                } else {
                    String[] words = command.split(" ");
                
                    if (words.length != 3) {
                        System.err.println("Must pass correct amount of arguments");
                    } else {
                        int num = Integer.parseInt(words[2]);
                        boolean contain = false;
                
                        for (List<String> el : index.list) {
                            if (el.contains(words[1])) {
                                contain = true;
                            }
                        }
                
                        if (contain == false) {
                            System.err.println("Cannot compute top-J similarity to " + words[1]);
                        } else {
                            // If measurement not initialized, default to cosine similarity
                            try {
                                if (measurement[1].equals("euc")) {
                                    similarity = new Similarity(new EucSimilarity());
                                    index.topJ = index.topj(words[1], num, similarity);
                                    System.out.println(index.topJ);
                                    System.out.println("Uses negative euclidean distance");
                                } else if (measurement[1].equals("eucnorm")) {
                                    similarity = new Similarity(new EucNormSimilarity());
                                    index.topJ = index.topj(words[1], num, similarity);
                                    System.out.println(index.topJ);
                                    System.out.println("Uses negative euclidean distance between norms");
                                } else {
                                    similarity = new Similarity(new CosineSimilarity());
                                    index.topJ = index.topj(words[1], num, similarity);
                                    System.out.println(index.topJ);
                                    System.out.println("Uses cosine similarity");
                                }
                            } catch (NullPointerException e) {
                                similarity = new Similarity(new CosineSimilarity());
                                index.topJ = index.topj(words[1], num, similarity);
                                System.out.println(index.topJ);
                                System.out.println("Uses cosine similarity");
                            }
                        }
                    }
                }
            } else if (command.contains("measure")) {
                if (command.length() < 11) {
                    System.err.println("Must pass a measurement type");
                } else {
                    measurement = command.split(" ");
                    if (measurement[1].equals("euc")) {
                        System.out.println("Similarity measure is negative euclidean distance");
                    } else if (measurement[1].equals("eucnorm")) {
                        System.out.println("Similarity measure is negative euclidean distance between norms");
                    } else if (measurement[1].equals("cosine")) {
                        System.out.println("Similarity measure is cosine similarity");
                    } else {
                        System.out.println("Similarity measure is cosine similarity");
                    }
                }
            } else if (command.equals("quit")) {
                System.exit(0);
            } else {
                System.err.println("Unrecognized command");
            }
        }
    }
}
